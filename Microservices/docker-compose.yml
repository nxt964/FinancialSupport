version: '3.8'

services:
  # Infrastructure Services
  zookeeper:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: zookeeper

  kafka:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: kafka

  kafka-init:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: kafka-init

  kafka-ui:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: kafka-ui

  redis:
    extends:
      file: ./Infras/redis/docker-compose.yml
      service: redis

  postgres:
    extends:
      file: ./Infras/postgres/docker-compose.yml
      service: postgres

  pgadmin:
    extends:
      file: ./Infras/postgres/docker-compose.yml
      service: pgadmin

  # UserService
  userservice:
    build:
      context: .
      dockerfile: Services/UserService/Dockerfile
    ports:
      - "${USER_SERVICE_HTTP_PORT}:80"
      - "${USER_SERVICE_HTTPS_PORT}:443"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: Host=postgres;Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      Redis__ConnectionString: redis:${REDIS_PORT},abortConnect=false
      Redis__InstanceName: ${REDIS_INSTANCE_NAME}
      Kafka__BootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS}
      JwtSettings__Key: ${JWT_SECRET}
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_Kestrel__Certificates__Default__Path: /app/certs/server.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__AllowInvalid: true
    volumes:
      - ./certs:/app/certs:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # EmailService
  emailservice:
    build:
      context: .
      dockerfile: Services/EmailService/Dockerfile
    ports:
      - "${EMAIL_SERVICE_HTTP_PORT}:80"
      - "${EMAIL_SERVICE_HTTPS_PORT}:443"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      EmailSettings__SmtpHost: ${EMAIL_SMTP_HOST}
      EmailSettings__SmtpPort: ${EMAIL_SMTP_PORT}
      EmailSettings__FromName: ${EMAIL_FROM_NAME}
      EmailSettings__Username: ${EMAIL_USERNAME}
      EmailSettings__Password: ${EMAIL_PASSWORD}
      EmailSettings__FromEmail: ${EMAIL_FROM_EMAIL}
      EmailSettings__EnableSsl: ${EMAIL_ENABLE_SSL}
      Kafka__BootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS}
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_Kestrel__Certificates__Default__Path: /app/certs/server.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__AllowInvalid: true
    volumes:
      - ./certs:/app/certs:ro
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # ChartService
  chartservice:
    build:
      context: .
      dockerfile: Services/ChartService/Dockerfile
    ports:
      - "${CHART_SERVICE_HTTP_PORT}:80"
      - "${CHART_SERVICE_HTTPS_PORT}:443"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      Binance__ApiKey: ${BINANCE_API_KEY}
      Binance__SecretKey: ${BINANCE_SECRET_KEY}
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_Kestrel__Certificates__Default__Path: /app/certs/server.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__AllowInvalid: true
    volumes:
      - ./certs:/app/certs:ro
    networks:
      - microservices-network
    restart: unless-stopped

  # NewsService
  # news-service:
  #   build:
  #     context: ./Services/NewsService/NewsService
  #     dockerfile: Dockerfile
  #   ports:
  #     - "${NEWS_SERVICE_HTTP_PORT}:80"
  #     - "${NEWS_SERVICE_HTTPS_PORT}:443"
  #   environment:
  #     NODE_ENV: production
  #     PORT: 80
  #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:${POSTGRES_PORT}/${POSTGRES_DB}
  #     REDIS_URL: redis://redis:${REDIS_PORT}
  #     KAFKA_BROKERS: ${KAFKA_BOOTSTRAP_SERVERS}
  #     SENTIMENT_API_URL: http://sentiment-api:5001/analyze
  #     CRAWL_SITE_URL: https://www.financialexpress.com
  #     HF_TOKEN: ${HF_TOKEN}
  #   depends_on:
  #     postgres:
  #       condition: service_healthy
  #     redis:
  #       condition: service_healthy
  #     kafka:
  #       condition: service_healthy
  #     sentiment-api:
  #       condition: service_started
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped

  # SentimentAPI
  # sentiment-api:
  #   build:
  #     context: ./Services/NewsService/SentimentAPI
  #     dockerfile: Dockerfile
  #   ports:
  #     - "5001:5001"
  #   environment:
  #     HF_TOKEN: ${HF_TOKEN}
  #     FLASK_ENV: production
  #     FLASK_APP: app.py
  #     PORT: 5001
  #   networks:
  #     - microservices-network
  #   restart: unless-stopped
    
  # API Gateway
  apigateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "${API_GATEWAY_HTTP_PORT}:80"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__Redis: redis:${REDIS_PORT}
      ASPNETCORE_URLS: http://+:80
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  postgres-data:

networks:
  microservices-network:
    driver: bridge 