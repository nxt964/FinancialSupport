version: "3.8"
services:
  # Infrastructure Services
  zookeeper:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: zookeeper

  kafka:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: kafka

  kafka-init:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: kafka-init

  kafka-ui:
    extends:
      file: ./Infras/kafka/docker-compose.yml
      service: kafka-ui

  redis:
    extends:
      file: ./Infras/redis/docker-compose.yml
      service: redis

  # Database Services
  user-service-db:
    extends:
      file: ./Infras/postgres/docker-compose.yml
      service: user-service-db

  news-service-db:
    extends:
      file: ./Infras/postgres/docker-compose.yml
      service: news-service-db

  pgadmin:
    extends:
      file: ./Infras/postgres/docker-compose.yml
      service: pgadmin

  # UserService
  userservice:
    build:
      context: .
      dockerfile: Services/UserService/Dockerfile
    ports:
      - "${USER_SERVICE_HTTP_PORT}:80"
      - "${USER_SERVICE_HTTPS_PORT}:443"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__DefaultConnection: Host=user-service-db;Port=5432;Database=UserServiceDb;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      Redis__ConnectionString: redis:${REDIS_PORT},abortConnect=false
      Redis__InstanceName: ${REDIS_INSTANCE_NAME}
      Kafka__BootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS}
      JwtSettings__Key: ${JWT_SECRET}
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_Kestrel__Certificates__Default__Path: /app/certs/server.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__AllowInvalid: true
    volumes:
      - ./certs:/app/certs:ro
    depends_on:
      user-service-db:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # EmailService
  emailservice:
    build:
      context: .
      dockerfile: Services/EmailService/Dockerfile
    ports:
      - "${EMAIL_SERVICE_HTTP_PORT}:80"
      - "${EMAIL_SERVICE_HTTPS_PORT}:443"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      EmailSettings__SmtpHost: ${EMAIL_SMTP_HOST}
      EmailSettings__SmtpPort: ${EMAIL_SMTP_PORT}
      EmailSettings__FromName: ${EMAIL_FROM_NAME}
      EmailSettings__Username: ${EMAIL_USERNAME}
      EmailSettings__Password: ${EMAIL_PASSWORD}
      EmailSettings__FromEmail: ${EMAIL_FROM_EMAIL}
      EmailSettings__EnableSsl: ${EMAIL_ENABLE_SSL}
      Kafka__BootstrapServers: ${KAFKA_BOOTSTRAP_SERVERS}
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_Kestrel__Certificates__Default__Path: /app/certs/server.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__AllowInvalid: true
    volumes:
      - ./certs:/app/certs:ro
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

  # ChartService
  chartservice:
    build:
      context: .
      dockerfile: Services/ChartService/Dockerfile
    ports:
      - "${CHART_SERVICE_HTTP_PORT}:80"
      - "${CHART_SERVICE_HTTPS_PORT}:443"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      Binance__ApiKey: ${BINANCE_API_KEY}
      Binance__SecretKey: ${BINANCE_SECRET_KEY}
      ASPNETCORE_URLS: https://+:443;http://+:80
      ASPNETCORE_Kestrel__Certificates__Default__Path: /app/certs/server.pfx
      ASPNETCORE_Kestrel__Certificates__Default__Password: password
      ASPNETCORE_Kestrel__Certificates__Default__AllowInvalid: true
    volumes:
      - ./certs:/app/certs:ro
    networks:
      - microservices-network
    restart: unless-stopped

  # NewsService
  newsservice:
    build:
      context: .
      dockerfile: Services/NewsService/Dockerfile
    ports:
      - "${NEWS_SERVICE_HTTP_PORT}:${NEWS_SERVICE_HTTP_PORT}"
    environment:
      NODE_ENV: production
      PORT: "${NEWS_SERVICE_HTTP_PORT}"
      DATABASE_URL: "${DATABASE_URL}"
      DIRECT_URL: "${DIRECT_URL}"
      CRAWL_SITE_URL: "${CRAWL_SITE_URL:-https://cryptoslate.com/news/}"
      HF_TOKEN: "${HF_TOKEN}"
      CORS_ORIGINS: "${CORS_ORIGINS}"
      REDIS_URL: "${REDIS_URL}"
    networks:
      - microservices-network
    restart: unless-stopped

  # API Gateway
  apigateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "${API_GATEWAY_HTTP_PORT}:80"
    environment:
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT}
      ConnectionStrings__Redis: redis:${REDIS_PORT}
      ASPNETCORE_URLS: http://+:80
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  redis-data:
  user-service-db-data:
  news-service-db-data:

networks:
  microservices-network:
    driver: bridge
